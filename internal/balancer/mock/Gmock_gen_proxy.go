// Code generated by MockGen. DO NOT EDIT.
// Source: internal/balancer/mock/MockProxy.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProxy is a mock of Proxy interface.
type MockProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProxyMockRecorder
}

// MockProxyMockRecorder is the mock recorder for MockProxy.
type MockProxyMockRecorder struct {
	mock *MockProxy
}

// NewMockProxy creates a new mock instance.
func NewMockProxy(ctrl *gomock.Controller) *MockProxy {
	mock := &MockProxy{ctrl: ctrl}
	mock.recorder = &MockProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxy) EXPECT() *MockProxyMockRecorder {
	return m.recorder
}

// GetHost mocks base method.
func (m *MockProxy) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *MockProxyMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*MockProxy)(nil).GetHost))
}

// GetLoad mocks base method.
func (m *MockProxy) GetLoad() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoad")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetLoad indicates an expected call of GetLoad.
func (mr *MockProxyMockRecorder) GetLoad() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoad", reflect.TypeOf((*MockProxy)(nil).GetLoad))
}

// IsAvailable mocks base method.
func (m *MockProxy) IsAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockProxyMockRecorder) IsAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockProxy)(nil).IsAvailable))
}

// New mocks base method.
func (m *MockProxy) New() (*Proxy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(*Proxy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockProxyMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockProxy)(nil).New))
}

// SetHealthCheck mocks base method.
func (m *MockProxy) SetHealthCheck() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHealthCheck")
}

// SetHealthCheck indicates an expected call of SetHealthCheck.
func (mr *MockProxyMockRecorder) SetHealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHealthCheck", reflect.TypeOf((*MockProxy)(nil).SetHealthCheck))
}

// Stop mocks base method.
func (m *MockProxy) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockProxyMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProxy)(nil).Stop))
}

// run mocks base method.
func (m *MockProxy) run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "run")
}

// run indicates an expected call of run.
func (mr *MockProxyMockRecorder) run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*MockProxy)(nil).run))
}
